// <auto-generated />
using System;
using System.Collections.Generic;
using Audiochan.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Audiochan.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211118004426_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Audiochan.Domain.Entities.Audio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint")
                        .HasColumnName("artist_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Duration")
                        .HasColumnType("numeric")
                        .HasColumnName("duration");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("file");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Picture")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("picture");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_audios");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_audios_artist_id");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_audios_created");

                    b.HasIndex("Tags")
                        .HasDatabaseName("ix_audios_tags");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Tags"), "GIN");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_audios_title");

                    b.ToTable("audios", (string)null);
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.FavoriteAudio", b =>
                {
                    b.Property<long>("AudioId")
                        .HasColumnType("bigint")
                        .HasColumnName("audio_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("AudioId1")
                        .HasColumnType("bigint")
                        .HasColumnName("audio_id1");

                    b.Property<DateTime>("Favorited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("favorited");

                    b.HasKey("AudioId", "UserId")
                        .HasName("pk_favorite_audios");

                    b.HasIndex("AudioId1")
                        .HasDatabaseName("ix_favorite_audios_audio_id1");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_favorite_audios_user_id");

                    b.ToTable("favorite_audios", (string)null);
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.FollowedArtist", b =>
                {
                    b.Property<long>("ObserverId")
                        .HasColumnType("bigint")
                        .HasColumnName("observer_id");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_id");

                    b.Property<DateTime>("FollowedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("followed_date");

                    b.Property<DateTime?>("UnfollowedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unfollowed_date");

                    b.HasKey("ObserverId", "TargetId")
                        .HasName("pk_followed_artists");

                    b.HasIndex("FollowedDate")
                        .HasDatabaseName("ix_followed_artists_followed_date");

                    b.HasIndex("TargetId")
                        .HasDatabaseName("ix_followed_artists_target_id");

                    b.ToTable("followed_artists", (string)null);
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Regular");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.Artist", b =>
                {
                    b.HasBaseType("Audiochan.Domain.Entities.User");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.ToTable("users");

                    b.HasDiscriminator().HasValue("Artist");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.Audio", b =>
                {
                    b.HasOne("Audiochan.Domain.Entities.Artist", "Artist")
                        .WithMany("Audios")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audios_users_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.FavoriteAudio", b =>
                {
                    b.HasOne("Audiochan.Domain.Entities.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favorite_audios_audios_audio_id");

                    b.HasOne("Audiochan.Domain.Entities.Audio", null)
                        .WithMany("FavoriteAudios")
                        .HasForeignKey("AudioId1")
                        .HasConstraintName("fk_favorite_audios_audios_audio_id1");

                    b.HasOne("Audiochan.Domain.Entities.User", "User")
                        .WithMany("FavoriteAudios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favorite_audios_users_user_id");

                    b.Navigation("Audio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.FollowedArtist", b =>
                {
                    b.HasOne("Audiochan.Domain.Entities.User", "Observer")
                        .WithMany("Followings")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followed_artists_users_observer_id");

                    b.HasOne("Audiochan.Domain.Entities.Artist", "Target")
                        .WithMany("Followers")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followed_artists_users_target_id");

                    b.Navigation("Observer");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.Audio", b =>
                {
                    b.Navigation("FavoriteAudios");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.User", b =>
                {
                    b.Navigation("FavoriteAudios");

                    b.Navigation("Followings");
                });

            modelBuilder.Entity("Audiochan.Domain.Entities.Artist", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("Followers");
                });
#pragma warning restore 612, 618
        }
    }
}
