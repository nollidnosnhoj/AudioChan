"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """
  Roles that are allowed to access the annotated resource.
  """
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

type Audio implements Node {
  id: ID!
  mp3: String
  picture: String
  user: User
  isFavorited: Boolean
  favorited: [User]
  slug: String!
  created: DateTime!
  title: String!
  description: String
  tags: [String!]!
  duration: Decimal!
  size: Long!
}

type User implements Node {
  id: ID!
  picture: String
  email: String
  isFollowed: Boolean
  audios: [Audio]
  favoriteAudios: [Audio]
  followings: [User]
  followers: [User]
  userName: String!
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  audioBySlug(slug: String!): Audio
  audiosByUsername(
    userName: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): AudiosByUsernameConnection
  favoriteAudiosByUserName(
    userName: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): FavoriteAudiosByUserNameConnection
  audiosByTags(
    tags: [String!]!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): AudiosByTagsConnection
  yourAudios(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): YourAudiosConnection
  yourFavoriteAudios(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): YourFavoriteAudiosConnection
  me: User!
  userByName(userName: String!): User!
  followings(
    userName: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): FollowingsConnection
  followers(
    userName: String!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): FollowersConnection
  yourFollowings(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): YourFollowingsConnection
  yourFollowers(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): YourFollowersConnection
}

type Mutation {
  createAudio(input: CreateAudioInput!): CreateAudioPayload!
  updateAudio(input: UpdateAudioInput!): UpdateAudioPayload!
  updateAudioPicture(
    input: UpdateAudioPictureInput!
  ): UpdateAudioPicturePayload!
  removeAudio(input: RemoveAudioInput!): RemoveAudioPayload!
  removeAudioPicture(
    input: RemoveAudioPictureInput!
  ): RemoveAudioPicturePayload!
  generateUploadLink(
    input: GenerateUploadLinkInput!
  ): GenerateUploadLinkPayload!
  favoriteAudio(input: FavoriteAudioInput!): FavoriteAudioPayload!
  unfavoriteAudio(input: UnfavoriteAudioInput!): UnfavoriteAudioPayload!
  login(input: LoginInput!): LoginPayload!
  logout: LogoutPayload!
  register(input: RegisterInput!): RegisterPayload!
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload!
  updateUserPicture(input: UpdateUserPictureInput!): UpdateUserPicturePayload!
  removeUserPicture: RemoveUserPicturePayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload!
  followUser(input: FollowUserInput!): FollowUserPayload!
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type AudiosByUsernameConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AudiosByUsernameEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Audio!]
}

"""
A connection to a list of items.
"""
type FavoriteAudiosByUserNameConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FavoriteAudiosByUserNameEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Audio!]
}

"""
A connection to a list of items.
"""
type AudiosByTagsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AudiosByTagsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Audio!]
}

"""
A connection to a list of items.
"""
type YourAudiosConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [YourAudiosEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Audio!]
}

"""
A connection to a list of items.
"""
type YourFavoriteAudiosConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [YourFavoriteAudiosEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Audio!]
}

"""
A connection to a list of items.
"""
type FollowingsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FollowingsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [User!]
}

"""
A connection to a list of items.
"""
type FollowersConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FollowersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [User!]
}

"""
A connection to a list of items.
"""
type YourFollowingsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [YourFollowingsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [User!]
}

"""
A connection to a list of items.
"""
type YourFollowersConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [YourFollowersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [User!]
}

type ValidationError implements Error {
  failures: [ValidationPropertyError!]!
  code: String!
  message: String!
}

type Unauthorized implements Error {
  code: String!
  message: String!
}

type UploadDoesNotExist implements Error {
  uploadId: String!
  code: String!
  message: String!
}

type AudioNotFound implements Error {
  audioId: Long
  slug: String
  code: String!
  message: String!
}

type Forbidden implements Error {
  code: String!
  message: String!
}

type SignInError implements Error {
  code: String!
  message: String!
}

type EmailTaken implements Error {
  email: String!
  code: String!
  message: String!
}

type UserNameTaken implements Error {
  userName: String!
  code: String!
  message: String!
}

type UnmatchedPassword implements Error {
  code: String!
  message: String!
}

type UserNotFound implements Error {
  userId: Long
  userName: String
  code: String!
  message: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type AudiosByUsernameEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Audio!
}

"""
An edge in a connection.
"""
type FavoriteAudiosByUserNameEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Audio!
}

"""
An edge in a connection.
"""
type AudiosByTagsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Audio!
}

"""
An edge in a connection.
"""
type YourAudiosEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Audio!
}

"""
An edge in a connection.
"""
type YourFavoriteAudiosEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Audio!
}

"""
An edge in a connection.
"""
type FollowingsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User!
}

"""
An edge in a connection.
"""
type FollowersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User!
}

"""
An edge in a connection.
"""
type YourFollowingsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User!
}

"""
An edge in a connection.
"""
type YourFollowersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User!
}

interface Error {
  code: String!
  message: String!
}

type ValidationPropertyError {
  property: String!
  message: String!
}

type GenerateUploadLinkResponse {
  uploadId: String!
  uploadUrl: String!
}

type ImageUploadResponse {
  url: String!
}

input CreateAudioInput {
  uploadId: String!
  title: String!
  description: String!
  tags: [String!]!
  fileName: String!
  fileSize: Long!
  duration: Decimal!
}

union CreateAudioError = ValidationError | Unauthorized | UploadDoesNotExist

type CreateAudioPayload {
  audio: Audio
  errors: [CreateAudioError!]
}

input UpdateAudioInput {
  id: ID!
  title: String
  description: String
  tags: [String!]
}

union UpdateAudioError = ValidationError | AudioNotFound | Forbidden

type UpdateAudioPayload {
  audio: Audio
  errors: [UpdateAudioError!]
}

input UpdateAudioPictureInput {
  id: ID!
  data: String!
}

union UpdateAudioPictureError = ValidationError | AudioNotFound | Forbidden

type UpdateAudioPicturePayload {
  response: ImageUploadResponse
  errors: [UpdateAudioPictureError!]
}

input RemoveAudioInput {
  id: ID!
}

union RemoveAudioError = AudioNotFound | Forbidden

type RemoveAudioPayload {
  message: String
  errors: [RemoveAudioError!]
}

input RemoveAudioPictureInput {
  id: ID!
}

union RemoveAudioPictureError = AudioNotFound | Forbidden

type RemoveAudioPicturePayload {
  message: String
  errors: [RemoveAudioPictureError!]
}

input GenerateUploadLinkInput {
  fileName: String!
  filesize: Long!
}

union GenerateUploadLinkError = ValidationError

type GenerateUploadLinkPayload {
  response: GenerateUploadLinkResponse
  errors: [GenerateUploadLinkError!]
}

input FavoriteAudioInput {
  id: ID!
}

union FavoriteAudioError = AudioNotFound

type FavoriteAudioPayload {
  message: String
  errors: [FavoriteAudioError!]
}

input UnfavoriteAudioInput {
  id: ID!
}

union UnfavoriteAudioError = AudioNotFound

type UnfavoriteAudioPayload {
  message: String
  errors: [UnfavoriteAudioError!]
}

input LoginInput {
  login: String!
  password: String!
}

union LoginError = SignInError

type LoginPayload {
  user: User
  errors: [LoginError!]
}

type LogoutPayload {
  message: String
}

input RegisterInput {
  userName: String!
  email: String!
  password: String!
}

union RegisterError = ValidationError | EmailTaken | UserNameTaken

type RegisterPayload {
  message: String
  errors: [RegisterError!]
}

input UpdateProfileInput {
  displayName: String
  about: String
  website: String
}

union UpdateProfileError = ValidationError

type UpdateProfilePayload {
  user: User
  errors: [UpdateProfileError!]
}

input UpdateUserPictureInput {
  data: String!
}

union UpdateUserPictureError = ValidationError | Forbidden

type UpdateUserPicturePayload {
  response: ImageUploadResponse
  errors: [UpdateUserPictureError!]
}

union RemoveUserPictureError = Forbidden

type RemoveUserPicturePayload {
  message: String
  errors: [RemoveUserPictureError!]
}

input UpdateUserInput {
  username: String
  email: String
}

union UpdateUserError = ValidationError | Forbidden | UserNameTaken | EmailTaken

type UpdateUserPayload {
  user: User
  errors: [UpdateUserError!]
}

input UpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

union UpdatePasswordError = ValidationError | Forbidden | UnmatchedPassword

type UpdatePasswordPayload {
  message: String
  errors: [UpdatePasswordError!]
}

input FollowUserInput {
  targetUserId: ID!
}

union FollowUserError = UserNotFound | Forbidden

type FollowUserPayload {
  message: String
  errors: [FollowUserError!]
}

input UnfollowUserInput {
  targetUserId: ID!
}

union UnfollowUserError = UserNotFound | Forbidden

type UnfollowUserPayload {
  message: String
  errors: [UnfollowUserError!]
}
